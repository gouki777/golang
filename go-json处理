package main

import (
	"encoding/json"
	"log"
)

func main() {
	data := `{
  "name1": [
    {
      "id": 0,
      "name": "criss"
    }
  ],
  "name": [
    {
      "id": 1,
      "name": "sunny"
    }
  ]
}`
	type User struct {
		ID   int    //`json:"id"`
		Name string //`json:"name"`
	}
	dataMap := make(map[string][]User)
	json.Unmarshal([]byte(data), &dataMap)
	for k, v := range dataMap {
		log.Printf(`%v,%v`, k, v)
	}
}
############### encoding/json 标准库demo ##########
package main
import (
	"encoding/json"
	"fmt"
	"os"
)
func main() {
	//json.Unmarshal https://godoc.org/encoding/json#Unmarshal
	var jsonBlob = []byte(`[
	{"Name": "Platypus", "Order": "Monotremata"},
	{"Name": "Quoll",    "Order": "Dasyuromorphia"}
]`)
	type Animal struct {
		Name  string
		Order string
	}
	var animals []Animal
	err := json.Unmarshal(jsonBlob, &animals)
	if err != nil {
		fmt.Println("error:", err)
	}
	fmt.Printf("%+v\n", animals)
	//json.Marshal https://godoc.org/encoding/json#Unmarshal
	type ColorGroup struct {
		ID     int
		Name   string
		Colors []string
	}
	group := ColorGroup{
		ID:     1,
		Name:   "Reds",
		Colors: []string{"Crimson", "Red", "Ruby", "Maroon"},
	}
	b, err := json.Marshal(group)
	if err != nil {
		fmt.Println("error:", err)
	}
	os.Stdout.Write(b)
}

//解码json使用json.Unmarshal()函数可以对一组数据进行JSON格式的解码
//func Unmarshal(data []byte, v interface{}) error
//示例解析到结构体
type Person struct {
  Age       int    `json:"age,string"`
  Name      string `json:"name"`
  Niubility bool   `json:"niubility"`
}
func main() {
  b := []byte(`{"age":"18","name":"5lmh.com","marry":false}`) // 假数据
  var p Person
  err := json.Unmarshal(b, &p)
  if err != nil {
  fmt.Println(err)
  }
  fmt.Println(p)
}

//
//示例通过map生成json
func main() {
    student := make(map[string]interface{})
    student["name"] = "5lmh.com"
    student["age"] = 18
    student["sex"] = "man"
    b, err := json.Marshal(student)
    if err != nil {
        fmt.Println(err)
    }
    fmt.Println(b)
}


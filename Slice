Go 语言切片(Slice)
Go 语言切片是对数组的抽象。
Go 数组的长度不可改变，在特定场景中这样的集合就不太适用，Go中提供了一种灵活，功能强悍的内置类型切片("动态数组"),
与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片的容量增大。
len() 和 cap() 函数
切片是可索引的，并且可以由 len() 方法获取长度。
切片提供了计算容量的方法 cap() 可以测量切片最长可以达到多少。
append
可以在slice尾部增加元素
可以在slice尾部增加到其他slice元素尾部
1.数组
func main() {
 s1 :=  [10]int {1,2,3,4,5,6,7,8,9,0}
 fmt.Println(s1)
 s2 :=s1[5:len(s1)]  //数组第五个元素到最后
 //s2 :=s1[5:]  数组第五个元素到最后
 fmt.Println(s2)
}
2.copy数组  用S1的(后者元素数值)赋值到S2上(元素len以S2为准)
func main() {
s1:=[]int{1,2,3,4,5,6}
s2:=[]int{7,8,9}
copy(s2,s1)             
fmt.Println(s2)
}
command-line-arguments
[1 2 3]
4.数组copy (全元素copy)
func main() {
s1:=[]int{1,2,3,4,5,6}
s2:=s1[:]       //[0:]=[:]
fmt.Println(s2)
}
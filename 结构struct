go没有class
使用type <name>{}



type persion struct {
   Name string
   Age  int
   Contact struct {       //匿名结构
      Phone,city string
   }
}
func main() {
   a:=persion{Name:"suns",Age:19}   
   a.Contact.city="bj"
   a.Contact.Phone="110"
   fmt.Println(a)
 }
 ============================
 type persion struct {
   string       //匿名字段
   int
}
func main() {
   a:=persion{"suns",19}
   fmt.Println(a)
 }
====ab对比 要一致======
type persion struct {
   Name string
   Age  int
}

func main() {
   a:=persion{Name:"suns",Age:19}
   b:=persion{Name:"suns",Age:20}
   fmt.Println(b==a)
 }
======嵌入========
type ccc struct {
   abc int
}
type aaa struct {
   ccc
   Name string
   Age  int
}
type bbb struct {
   ccc
   Name string
   Age  int
}

func main() {
   a:=aaa{Name:"suns",Age:19,ccc:ccc{abc:1}}   //ccc赋值方法ccc:ccc{abc:1}
   b:=bbb{Name:"suns",Age:20,ccc:ccc{abc:1}}
   a.abc=100    //嵌入
   fmt.Println(a,b)
 }
===============
同样地结构体也是一种数据类型，所以它也可以作为一个匿名字段来使用，如同上面例子中那样。外层结构体通过 outer.in1 
直接进入内层结构体的字段，内嵌结构体甚至可以来自其他包。内层结构体被简单的插入或者内嵌进外层结构体。
这个简单的“继承”机制提供了一种方式，使得可以从另外一个或一些类型继承部分或全部实现。
package main
import "fmt"
type A struct {
    ax, ay int
}
type B struct {
    A
    bx, by float32
}
func main() {
    b := B{A{1, 2}, 3.0, 4.0}
    fmt.Println(b.ax, b.ay, b.bx, b.by)
    fmt.Println(b.A)
}